package gameplay;

import java.util.Random;

//TODO Test the Food Class

/**
 * <b>Overview</b><br>
 * <p>
 * The class Food stores information about each unit of food present in the game
 * <br>There can be two sorts of Food: Vegetation or Carrion, so
 * <br>Food is the parent class of the {@link Vegetation} and {@link Carrion} classes. 
 * <br>Food stores information about:
 * <ul>
 * <li>Its amount of energy
 * <li>Its maximum amount of energy
 * </ul>
 * </p>
 * <b>Responsibilities</b><br>
 * <p>
 * The class Food is responsible for storing information about the Food present in a Cell of the Map.
 * </p>
 * <b>Collaborators</b><br>
 * <p>
 * Food is a class that only stores information: it cannot decide
 * where to be placed. All the decision are made by the 
 * {@link Cell} class.
 * </p>
 *
 * @author	AXXO
 * @version 1.1
 * @since	May 21, 2011@12:30:41 AM
 */

public abstract class Food {

	protected int energy;
	protected int energyMax;

	/** 
	 * The method getEnergy returns the amount of energy the food can supply,
	 * which is a value between 0 and {@link #getEnergyMax()}. 
	 *
	 * @return energy The energy of the food         
	 * 
	 * @since	May 21, 2011@2:48:46 PM
	 * 
	 */
	public int getEnergy() {
		return energy;
	}
	
	/** 
	 * The method getEnergyMax returns the maximum amount of energy
	 * the food can supply.
	 *
	 * @return energyMax The maximum energy of the food         
	 *
	 * @since	May 21, 2011@4:31:10 PM
	 * 
	 */
	public int getEnergyMax() {
		return energyMax;
	}
	
	/** 
	 * The method setEnergy sets the amount of energy of the food
	 *
	 * @param theValue The new value of energy
	 * @throws IllegalArgumentException if the new energy value is negative          
	 *  
	 * @since	May 21, 2011@2:35:43 PM
	 * 
	 */
	public void setEnergy(int theValue) throws IllegalArgumentException {
		
		if (theValue < 0) {
			throw new IllegalArgumentException("Negative energy is not allowed");
		}
		
		else {
			energy = theValue;
		}
		
		/*
		 * Energy must not exceed the maximum amount of energy of the food
		 */
		if (energy > energyMax) {
			energy = energyMax;
		}
		
	}
	
	/** 
	 * The method setEnergyMax sets the maximum amount of energy the food can supply
	 *
	 * @param theEnergyMax the desired value for the maximum amount of energy
	 * @throws IllegalArgumentException if the value given as parameter is negative
	 *  
	 * @since	May 21, 2011@5:45:08 PM
	 * 
	 */
	public void setEnergyMax(int theEnergyMax) throws IllegalArgumentException {
		
		if (theEnergyMax >= 0) {
			energyMax = theEnergyMax;
		}	
		
		else {
			throw new IllegalArgumentException("a negative energyMax value is not allowed");
		}
	
	}
	
	/** 
	 * This is the abstract method updateTurnEnergy. It determines the energy variation of food at the end of every turn
	 * </br>It will be implemented by {@linkVegetation} and {@linkCarrion} classes.
	 * 
	 * @since	May 21, 2011@6:09:01 PM
	 * 
	 */
	public abstract void updateTurnEnergy();
	
}	

	/**
	 * Vegetation class is a subclass of {@linkFood} and represents the food edible by herbivores.
	 *  
	 * @author	AXXO
	 * @version 1.1
	 * @since	May 21, 2011@6:39:03 PM
	 *
	 */
	class Vegetation extends Food {
		
		/**
		 * Constructor sets the maximum energy to a random value between 150 and 350 
		 * 
		 * @since May 21, 2011@6:48:11 PM
		 */
		public Vegetation() {
			
			/*
			 * We declare a random object 
			 */
			Random random = new Random();
			
			/*
			 * We flip a coin to decide whether the maximum energy value will be greater or less than 250.
			 */
			if (random.nextBoolean()) {
				/*
				 * We use the method random.nexInt(101) to pick a random number from 0 to 100
				 */
				setEnergyMax(250 + random.nextInt(101));
			}
			
			else {
				setEnergyMax(250 - random.nextInt(101));
			}
			
		}

		/* {@inheritDoc}
		 * @see gameplay.Food#updateTurnEnergy()
		 * The energy of the vegetation is increased by energyMax/20 every turn 
		 */
		public void updateTurnEnergy() {
			
			energy += energyMax / 20;
			
			/*
			 * Energy must not exceed energyMax
			 */
			if (energy > energyMax) {
				energy = energyMax;
			}	
		}

	}
	
	/**
	 * Carrion class is a subclass of {@linkFood} and represents the food edible by carnivorous.
	 *   
	 * @author	AXXO
	 * @version 1.1
	 * @since	May 21, 2011@7:41:15 PM
	 *
	 */
	class Carrion extends Food {

		/**
		 * Constructor sets the maximum energy to a random value between 350 and 650
		 * 
		 * @since May 21, 2011@7:43:59 PM
		 */
		public Carrion() {
			
			/*
			 * We declare a random object 
			 */
			Random random = new Random();
			
			/*
			 * We flip a coin to decide whether the maximum energy value will be greater or less than 250.
			 */
			if (random.nextBoolean()) {
				/*
				 * We use the method random.nexInt(101) to pick a random number from 0 to 100
				 */
				setEnergyMax(500 + random.nextInt(150));
			}
			
			else {
				setEnergyMax(500 - random.nextInt(150));
			}
		}

		/* {@inheritDoc}
		 * @see gameplay.Food#updateTurnEnergy()
		 * The energy of the carrion is decreased by energyMax/20 every turn
		 */
		public void updateTurnEnergy() {
			
			energy -= energyMax / 20;
		}

	}
